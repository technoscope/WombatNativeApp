Index: app/src/main/java/com/example/wombatapp/database/DatabaseHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wombatapp.database;\r\n\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.database.Cursor;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteException;\r\nimport android.database.sqlite.SQLiteOpenHelper;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\npublic class DatabaseHelper extends SQLiteOpenHelper {\r\n    private static final String DATABASE_NAME = \"Diet.db\";\r\n    private static final String DATE_AND_TIME = \"date_and_time\";\r\n    private static final String REMARKS = \"remarks\";\r\n\r\n    private static final String USER_TABLE_NAME = \"UserTable\";\r\n    private static final String USERNAME = \"user_name\";\r\n    private static final String GENDER = \"gender\";\r\n    private static final String HEIGHT = \"height\";\r\n    private static final String BIRTHDATE = \"birthdate\";\r\n    private static final String PERSONAL_GOALS = \"personal_goals\";\r\n    private static final String USER_ICON_ID = \"personal_goals\";\r\n\r\n\r\n    private static final String HEART_TABLE_NAME = \"heartTable\";\r\n    private static final String PULSE_RATE = \"pulse_rate\";\r\n    private static final String MAX_PULSE_RATE = \"max_pulse_rate\";\r\n    private static final String HRV = \"hrv\";\r\n    private static final String BLOOD_OXYGEN = \"blood_oxygen\";\r\n\r\n    private static final String WEIGHT_TABLE_NAME = \"weightTable\";\r\n    private static final String WEIGHT = \"weight\";\r\n    private static final String MUSCLE_MASS = \"muscle_mass\";\r\n    private static final String FAT = \"fat\";\r\n\r\n    private static final String SLEEP_TABLE_NAME = \"weightTable\";\r\n    private static final String SLEEP_TIME = \"sleep_time\";\r\n    private static final String DEEP_SLEEP_TIME = \"deep_sleep_time\";\r\n\r\n    private static final String BLOOD_PRESSURE_TABLE_NAME = \"bloodPressureTable\";\r\n    private static final String SYSTOLIC_PRESSURE = \"systolic_pressure\";\r\n    private static final String DIASTOLIC_PRESSURE = \"diastolic_pressure\";\r\n    private static final String HEART_PULSE_RATE_FOR_BLOOD_PRESSURE = \"heart_pulse_rate\";\r\n\r\n    private static final String ECG_TABLE_NAME = \"ecgTable\";\r\n    private static final String RRI_MAXIMUM = \"RRI_maximum\";\r\n    private static final String RRI_MINIMUM = \"RRI_minimum\";\r\n    private static final String HEART_RATE_FOR_ECG = \"heart_rate\";\r\n    private static final String HRV_ECG = \"hrv\";\r\n    private static final String MOOD = \"mood\";\r\n    private static final String RESPIRATORY_RATE = \"respiratory_rate\";\r\n\r\n    private static final String tableStatementCreateUserTable = \"CREATE TABLE \" + USER_TABLE_NAME + \"(\" + USERNAME + \" String,\" + GENDER + \" String,\" + HEIGHT + \" String,\"  + PERSONAL_GOALS + \" String,\" + USER_ICON_ID + \" String,\" + BIRTHDATE + \" String)\";\r\n    private static final String tableStatementCreateHeartTable = \"CREATE TABLE \" + HEART_TABLE_NAME + \"(\" + USERNAME + \" String,\" + PULSE_RATE + \" String,\" + MAX_PULSE_RATE + \" String,\" + HRV + \" String,\"  + BLOOD_OXYGEN + \" String,\" + REMARKS + \" String,\" + DATE_AND_TIME + \" String)\";\r\n    private static final String tableStatementCreateWeightTable = \"CREATE TABLE \" + WEIGHT_TABLE_NAME + \"(\" + USERNAME + \" String,\" + WEIGHT + \" String,\" + MUSCLE_MASS + \" String,\"  + FAT + \" String,\" + REMARKS + \" String,\" + DATE_AND_TIME + \" String)\";\r\n    private static final String tableStatementCreateSleepTable = \"CREATE TABLE \" + SLEEP_TABLE_NAME + \"(\" + USERNAME + \" String,\" + SLEEP_TIME + \" String,\" + DEEP_SLEEP_TIME + \" String,\" + REMARKS + \" String,\" + DATE_AND_TIME + \" String)\";\r\n    private static final String tableStatementCreateBloodPressureTable = \"CREATE TABLE \" + BLOOD_PRESSURE_TABLE_NAME + \"(\" + USERNAME + \" String,\" + SYSTOLIC_PRESSURE + \" String,\" + DIASTOLIC_PRESSURE + \" String,\"  + HEART_PULSE_RATE_FOR_BLOOD_PRESSURE + \" String,\" + REMARKS + \" String,\" + DATE_AND_TIME + \" String)\";\r\n    private static final String tableStatementCreateEcgTable = \"CREATE TABLE \" + ECG_TABLE_NAME + \"(\" + USERNAME + \" String,\" + RRI_MAXIMUM + \" String,\" + RRI_MINIMUM + \" String,\"  + HEART_RATE_FOR_ECG + \" String,\" + HRV_ECG + \" String,\" + MOOD + \" String,\" + RESPIRATORY_RATE + \" String,\" + REMARKS + \" String,\" + DATE_AND_TIME + \" String)\";\r\n\r\n\r\n    SQLiteDatabase db;\r\n\r\n    public DatabaseHelper(@Nullable Context context) {\r\n        super(context, DATABASE_NAME, null, SQLiteDatabase.CREATE_IF_NECESSARY);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(SQLiteDatabase db) {\r\n        db.execSQL(tableStatementCreateUserTable);\r\n        db.execSQL(tableStatementCreateWeightTable);\r\n        db.execSQL(tableStatementCreateHeartTable);\r\n        db.execSQL(tableStatementCreateSleepTable);\r\n        db.execSQL(tableStatementCreateBloodPressureTable);\r\n        db.execSQL(tableStatementCreateEcgTable);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\r\n        db.execSQL(\"DROP TABLE IF EXISTS \" + USER_TABLE_NAME);\r\n        db.execSQL(\"DROP TABLE IF EXISTS \" + HEART_TABLE_NAME);\r\n        db.execSQL(\"DROP TABLE IF EXISTS \" + WEIGHT_TABLE_NAME);\r\n        db.execSQL(\"DROP TABLE IF EXISTS \" + SLEEP_TABLE_NAME);\r\n        db.execSQL(\"DROP TABLE IF EXISTS \" + BLOOD_PRESSURE_TABLE_NAME);\r\n        db.execSQL(\"DROP TABLE IF EXISTS \" + ECG_TABLE_NAME);\r\n\r\n    }\r\n\r\n    public boolean addUser(String username, String gender, String age, String height, String personalGoals, String userIconId) throws SQLiteException {\r\n        db = this.getWritableDatabase();\r\n        ContentValues cv = new ContentValues();\r\n        cv.put(this.USERNAME, username);\r\n        cv.put(this.GENDER, gender);\r\n        cv.put(this.HEIGHT, height);\r\n        cv.put(this.PERSONAL_GOALS, personalGoals);\r\n        cv.put(this.USER_ICON_ID, personalGoals);\r\n        cv.put(this.BIRTHDATE, age);\r\n\r\n        long result = db.insert(USER_TABLE_NAME, null, cv);\r\n        return result != 0;\r\n    }\r\n\r\n    public boolean addMeasurementWeight(String username, String weight, String muscle, String fat,String remarks, String dateAndTime) throws SQLiteException {\r\n        db = this.getWritableDatabase();\r\n        ContentValues cv = new ContentValues();\r\n        cv.put(this.USERNAME, username);\r\n        cv.put(this.WEIGHT, weight);\r\n        cv.put(this.MUSCLE_MASS, muscle);\r\n        cv.put(this.FAT, fat);\r\n        cv.put(this.REMARKS, remarks);\r\n        cv.put(this.DATE_AND_TIME, dateAndTime);\r\n\r\n        long result = db.insert(WEIGHT_TABLE_NAME, null, cv);\r\n        return result != 0;\r\n    }\r\n\r\n    public boolean addMeasurementHeart(String username,String pulserate,String maxpulse,String hrv, String bloodOxygen, String remarks, String dataAndTime) {\r\n        db=this.getWritableDatabase();\r\n        ContentValues cv=new ContentValues();\r\n        cv.put(this.USERNAME,username);\r\n        cv.put(this.PULSE_RATE,pulserate);\r\n        cv.put(this.MAX_PULSE_RATE,maxpulse);\r\n        cv.put(this.HRV,hrv);\r\n        cv.put(this.BLOOD_OXYGEN,bloodOxygen);\r\n        cv.put(this.REMARKS, remarks);\r\n        cv.put(this.DATE_AND_TIME,dataAndTime);\r\n        long result = db.insert(HEART_TABLE_NAME, null, cv);\r\n        return result != 0;\r\n    }\r\n\r\n    public boolean addMeasurementSleep(String username,String sleepTime,String deepSleepTime ,String remarks, String dataAndTime) {\r\n        db=this.getWritableDatabase();\r\n        ContentValues cv=new ContentValues();\r\n        cv.put(this.USERNAME,username);\r\n        cv.put(this.SLEEP_TIME,sleepTime);\r\n        cv.put(this.DEEP_SLEEP_TIME,deepSleepTime);\r\n        cv.put(this.REMARKS, remarks);\r\n        cv.put(this.DATE_AND_TIME,dataAndTime);\r\n        long result = db.insert(SLEEP_TABLE_NAME, null, cv);\r\n        return result != 0;\r\n    }\r\n\r\n    public boolean addMeasurementBloodPressure(String username, String systolicPressure, String diastolicPressure, String heartPulseRate ,String remarks, String dataAndTime) {\r\n        db=this.getWritableDatabase();\r\n        ContentValues cv=new ContentValues();\r\n        cv.put(this.USERNAME,username);\r\n        cv.put(this.SYSTOLIC_PRESSURE,systolicPressure);\r\n        cv.put(this.DIASTOLIC_PRESSURE,diastolicPressure);\r\n        cv.put(this.HEART_PULSE_RATE_FOR_BLOOD_PRESSURE,heartPulseRate);\r\n        cv.put(this.REMARKS, remarks);\r\n        cv.put(this.DATE_AND_TIME,dataAndTime);\r\n        long result = db.insert(BLOOD_PRESSURE_TABLE_NAME, null, cv);\r\n        return result != 0;\r\n    }\r\n\r\n    public boolean addMeasurementEcg(String username,String rriMaximum,String rriMinimum,String heartRate, String hrv,String mood, String respiratoryRate, String remarks, String dataAndTime) {\r\n        db=this.getWritableDatabase();\r\n        ContentValues cv=new ContentValues();\r\n        cv.put(this.USERNAME,username);\r\n        cv.put(this.RRI_MAXIMUM,rriMaximum);\r\n        cv.put(this.RRI_MINIMUM,rriMinimum);\r\n        cv.put(this.HEART_RATE_FOR_ECG,heartRate);\r\n        cv.put(this.HRV_ECG,hrv);\r\n        cv.put(this.MOOD,mood);\r\n        cv.put(this.RESPIRATORY_RATE,respiratoryRate);\r\n        cv.put(this.REMARKS, remarks);\r\n        cv.put(this.DATE_AND_TIME,dataAndTime);\r\n        long result = db.insert(ECG_TABLE_NAME, null, cv);\r\n        return result != 0;\r\n    }\r\n\r\n    public Cursor getusers() {\r\n        db = this.getReadableDatabase();\r\n        Cursor cur = db.rawQuery(\"Select * from \" + USER_TABLE_NAME, null);\r\n        return cur;\r\n    }\r\n\r\n    public Cursor getuserbyname(String username) {\r\n        db = this.getReadableDatabase();\r\n        Cursor cur = db.rawQuery(\"Select * from \" + USER_TABLE_NAME + \" where \" + this.USERNAME + \"='\" + username + \"'\", null);\r\n        return cur;\r\n    }\r\n\r\n    public Cursor getWeightData(String username) {\r\n        db = this.getReadableDatabase();\r\n        Cursor cur = db.rawQuery(\"Select * from \" + WEIGHT_TABLE_NAME + \" where \" + this.USERNAME + \"='\" + username + \"'\", null);\r\n        return cur;\r\n    }\r\n\r\n\r\n//    //TimeOut\r\n//    public boolean Updatemearement(String username, String weight, String muscle, String fat) {\r\n//        db = this.getWritableDatabase();\r\n//        ContentValues cv = new ContentValues();\r\n//        cv.put(this.USERNAME, username);\r\n//        cv.put(this.weight, weight);\r\n//        cv.put(this.muscle, muscle);\r\n//        cv.put(this.fat, fat);\r\n//        long result = db.update(measurementtable, cv, this.USERNAME + \"='\" + username + \"'\", null);\r\n//        return result != 0;\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/wombatapp/database/DatabaseHelper.java	(revision c7d187dc01226e114fb907081729d28b9ac08fb6)
+++ app/src/main/java/com/example/wombatapp/database/DatabaseHelper.java	(date 1604737897179)
@@ -190,6 +190,8 @@
     }
 
 
+
+
 //    //TimeOut
 //    public boolean Updatemearement(String username, String weight, String muscle, String fat) {
 //        db = this.getWritableDatabase();
Index: app/src/main/java/com/example/wombatapp/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wombatapp;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothManager;\r\nimport android.content.ComponentName;\r\nimport android.content.Intent;\r\nimport android.content.IntentSender;\r\nimport android.content.ServiceConnection;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Color;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.IBinder;\r\nimport android.os.Looper;\r\nimport android.os.Message;\r\nimport android.preference.PreferenceManager;\r\nimport android.text.Html;\r\nimport android.text.TextUtils;\r\nimport android.text.method.LinkMovementMethod;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.wombatapp.addmeasurement.AddMeasurementActivity;\r\nimport com.example.wombatapp.bluetooth.BluetoothCommunication;\r\nimport com.example.wombatapp.bluetooth.BluetoothSettingsFragment;\r\nimport com.example.wombatapp.bluetooth.OpenScale;\r\nimport com.example.wombatapp.dashboard.DashboardActivity;\r\nimport com.example.wombatapp.database.DatabaseHelper;\r\nimport com.example.wombatapp.datatypes.ScaleMeasurement;\r\nimport com.example.wombatapp.minttihealth.health.AlertDialogBuilder;\r\nimport com.example.wombatapp.minttihealth.health.App;\r\nimport com.example.wombatapp.minttihealth.health.BleDeviceListDialogFragment;\r\nimport com.example.wombatapp.minttihealth.health.HcService;\r\nimport com.example.wombatapp.minttihealth.health.PermissionManager;\r\nimport com.example.wombatapp.minttihealth.health.adapter.BindDevListAdapter;\r\nimport com.example.wombatapp.model.StepModel;\r\nimport com.example.wombatapp.support.SupportActivity;\r\nimport com.example.wombatapp.userfragments.AllTimeFragment;\r\nimport com.example.wombatapp.userfragments.Datamodel;\r\nimport com.example.wombatapp.userfragments.MonthFragment;\r\nimport com.example.wombatapp.userfragments.ScaleDataModel;\r\nimport com.example.wombatapp.userfragments.ScaleModel;\r\nimport com.example.wombatapp.userfragments.TodayFragment;\r\nimport com.example.wombatapp.userfragments.WeekFragment;\r\nimport com.example.wombatapp.userfragments.YearFragment;\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn;\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInAccount;\r\nimport com.google.android.gms.common.ConnectionResult;\r\nimport com.google.android.gms.common.Scopes;\r\nimport com.google.android.gms.common.api.GoogleApiClient;\r\nimport com.google.android.gms.common.api.PendingResult;\r\nimport com.google.android.gms.common.api.ResultCallback;\r\nimport com.google.android.gms.common.api.Scope;\r\nimport com.google.android.gms.common.api.Status;\r\nimport com.google.android.gms.fitness.Fitness;\r\nimport com.google.android.gms.fitness.FitnessOptions;\r\nimport com.google.android.gms.fitness.FitnessStatusCodes;\r\nimport com.google.android.gms.fitness.data.Bucket;\r\nimport com.google.android.gms.fitness.data.DataPoint;\r\nimport com.google.android.gms.fitness.data.DataSet;\r\nimport com.google.android.gms.fitness.data.DataType;\r\nimport com.google.android.gms.fitness.data.Field;\r\nimport com.google.android.gms.fitness.data.Value;\r\nimport com.google.android.gms.fitness.request.DataReadRequest;\r\nimport com.google.android.gms.fitness.request.OnDataPointListener;\r\nimport com.google.android.gms.fitness.request.SensorRequest;\r\nimport com.google.android.gms.fitness.result.DataReadResult;\r\nimport com.google.android.gms.fitness.result.ListSubscriptionsResult;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.linktop.DeviceType;\r\nimport com.linktop.MonitorDataTransmissionManager;\r\nimport com.linktop.constant.BluetoothState;\r\nimport com.linktop.constant.DeviceInfo;\r\nimport com.linktop.constant.WareType;\r\nimport com.linktop.infs.OnBleConnectListener;\r\nimport com.linktop.infs.OnDeviceInfoListener;\r\nimport com.linktop.infs.OnDeviceVersionListener;\r\nimport com.linktop.whealthService.task.OxTask;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.ObservableBoolean;\r\nimport androidx.databinding.ObservableField;\r\nimport androidx.databinding.ObservableInt;\r\nimport androidx.lifecycle.ViewModelProviders;\r\nimport androidx.viewpager.widget.ViewPager;\r\nimport lib.linktop.common.CssSubscriber;\r\nimport lib.linktop.intf.OnCssSocketRunningListener;\r\nimport lib.linktop.obj.Device;\r\nimport lib.linktop.obj.LoadBean;\r\nimport lib.linktop.sev.BuildConfig;\r\nimport lib.linktop.sev.CssServerApi;\r\nimport lib.linktop.sev.HmLoadDataTool;\r\nimport rx.Observable;\r\nimport rx.Subscriber;\r\nimport timber.log.Timber;\r\n\r\nimport static com.example.wombatapp.utils.PermissionHelper.ENABLE_BLUETOOTH_REQUEST;\r\n\r\npublic class MainActivity extends AppCompatActivity implements OnDataPointListener,\r\n        GoogleApiClient.ConnectionCallbacks,\r\n        GoogleApiClient.OnConnectionFailedListener, SharedPreferences.OnSharedPreferenceChangeListener, OnBleConnectListener, ServiceConnection,\r\n        OnDeviceVersionListener, MonitorDataTransmissionManager.OnServiceBindListener, OnDeviceInfoListener {\r\n    public HcService mHcService;\r\n    ViewPager viewPager;\r\n    TabLayout tabs;\r\n    private SharedPreferences prefs;\r\n    SelectionPagerAdabter sectionsPagerAdapter;\r\n    DatabaseHelper databaseHelper;\r\n    private static final int REQUEST_OPEN_BT = 0x23;\r\n    TextView name;\r\n    ScaleDataModel scaleDataModel;\r\n    BottomNavigationView bottomNavigationView;\r\n    ScaleModel model = new ScaleModel();\r\n    Datamodel datamodel = new Datamodel();\r\n    TextView age, gender;\r\n    private boolean showScanList = true;\r\n\r\n    StepModel stepModel = new StepModel();\r\n\r\n\r\n    private BindDevListAdapter mAdapter;\r\n    BleDeviceListDialogFragment mBleDeviceListDialogFragment;\r\n    //Google Fit API's\r\n    private static final int REQUEST_OAUTH = 1;\r\n    private static final String AUTH_PENDING = \"auth_state_pending\";\r\n    private boolean authInProgress = false;\r\n    private GoogleApiClient mApiClient = null;\r\n    TextView measurementbtn;\r\n    DatabaseReference mReference;\r\n\r\n    //Store Api's Google Fit\r\n    private ResultCallback<Status> mSubscribeResultCallback;\r\n    private ResultCallback<Status> mCancelSubscriptionResultCallback;\r\n    private ResultCallback<ListSubscriptionsResult> mListSubscriptionsResultCallback;\r\n    private int GOOGLE_FIT_PERMISSIONS_REQUEST_CODE = 420;\r\n\r\n    FitnessOptions fitnessOptions;\r\n\r\n    private final Handler mHandler = new Handler(Looper.getMainLooper()) {\r\n        @Override\r\n        public void handleMessage(Message msg) {\r\n            if (msg.what == HcService.BLE_STATE) {\r\n                final int state = (int) msg.obj;\r\n                Log.e(\"Message\", \"receive state:\" + state);\r\n                if (state == BluetoothState.BLE_NOTIFICATION_ENABLED) {\r\n                    mHcService.dataQuery(HcService.DATA_QUERY_SOFTWARE_VER);\r\n                } else {\r\n                    onBleState(state);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    public void processDataSet(DataSet dataSet) {\r\n        for (DataPoint dp : dataSet.getDataPoints()) {\r\n            long dpStart = dp.getStartTime(TimeUnit.NANOSECONDS) / 1000000;\r\n            long dpEnd = dp.getEndTime(TimeUnit.NANOSECONDS) / 1000000;\r\n            for (Field field : dp.getDataType().getFields()) {\r\n                String fieldname = field.getName();\r\n                String fieldvalue = String.valueOf(dp.getValue(field));\r\n                Toast.makeText(MainActivity.this, \"start time:\"+dpStart+\r\n                        \"\\n end time\"+dpEnd+\"field name\" + fieldname +\r\n                        \"\\n value: \" + fieldvalue, Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n    }\r\n\r\n    private final ObservableBoolean isLogin = App.isLogin;\r\n    private final ObservableField<String> id = new ObservableField<>(\"\");//当前选定的设备id\r\n    private final ObservableField<String> key = new ObservableField<>(\"\");//当前选定的设备key\r\n    private final ObservableField<String> softVer = new ObservableField<>(\"\");\r\n    private final ObservableField<String> hardVer = new ObservableField<>(\"\");\r\n    private final ObservableField<String> firmVer = new ObservableField<>(\"\");\r\n    private final ObservableInt isDevBind = new ObservableInt(0);\r\n\r\n    @SuppressLint(\"ResourceAsColor\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        mApiClient = new GoogleApiClient.Builder(this)\r\n                .addApi(Fitness.SENSORS_API)\r\n                .addApi(Fitness.HISTORY_API)\r\n                .addApi(Fitness.RECORDING_API)\r\n                .addScope(new Scope(Scopes.FITNESS_ACTIVITY_READ_WRITE))\r\n                .useDefaultAccount()//.setAccountName(\"hamadkhan345@gmail.com\")\r\n                .addConnectionCallbacks(this)\r\n                .addOnConnectionFailedListener(this)\r\n                .build();\r\n        mApiClient.connect();\r\n\r\n        if (!App.isUseCustomBleDevService) {\r\n            Intent serviceIntent = new Intent(this, HcService.class);\r\n            bindService(serviceIntent, this, BIND_AUTO_CREATE);\r\n        } else {\r\n            //绑定服务，\r\n            // 类型是 HealthMonitor（HealthMonitor健康检测仪），\r\n            MonitorDataTransmissionManager.getInstance().bind(DeviceType.HealthMonitor, this,\r\n                    this);\r\n        }\r\n        if (!App.isUseCustomBleDevService) {\r\n            Intent serviceIntent = new Intent(this, HcService.class);\r\n            bindService(serviceIntent, this, BIND_AUTO_CREATE);\r\n        } else {\r\n            //绑定服务，\r\n            // 类型是 HealthMonitor（HealthMonitor健康检测仪），\r\n            MonitorDataTransmissionManager.getInstance().bind(DeviceType.HealthMonitor, this,\r\n                    this);\r\n        }\r\n\r\n        if (!App.isUseCustomBleDevService) {\r\n            onBleState(MonitorDataTransmissionManager.getInstance().getBleState());\r\n        }\r\n\r\n        stepModel=ViewModelProviders.of(MainActivity.this).get(StepModel.class);\r\n\r\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n\r\n        setContentView(R.layout.activity_main);\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        //getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_back_btn);\r\n        measurementbtn=findViewById(R.id.id_measurement_activityy);\r\n        measurementbtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                startActivity(new Intent(MainActivity.this, AddMeasurementActivity.class));\r\n            }\r\n        });\r\n\r\n        onBleState(MonitorDataTransmissionManager.getInstance().getBleState());\r\n\r\n        if (savedInstanceState != null) {\r\n            authInProgress = savedInstanceState.getBoolean(AUTH_PENDING);\r\n        }\r\n\r\n\r\n\r\n        databaseHelper = new DatabaseHelper(this);\r\n        prefs = PreferenceManager.getDefaultSharedPreferences(this);\r\n        prefs.registerOnSharedPreferenceChangeListener(this);\r\n        name = findViewById(R.id.id_name_mainactivity);\r\n        name.setText(getIntent().getStringExtra(\"username\"));\r\n        age = findViewById(R.id.id_age);\r\n        gender = findViewById(R.id.id_gender);\r\n        model = ViewModelProviders.of(this).get(ScaleModel.class);\r\n        datamodel = ViewModelProviders.of(this).get(Datamodel.class);\r\n        model.setName(getIntent().getStringExtra(\"username\"));\r\n        bottomNavigationView = findViewById(R.id.navigation);\r\n        ImageView sigout = findViewById(R.id.id_edit_profile);\r\n        sigout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mApiClient.clearDefaultAccountAndReconnect();\r\n            }\r\n        });\r\n\r\n        bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n                if (item.getItemId() == R.id.navigation_home) {\r\n                    startActivity(new Intent(MainActivity.this, DashboardActivity.class));\r\n                    finish();\r\n                } else if (item.getItemId() == R.id.navigation_support) {\r\n                    startActivity(new Intent(MainActivity.this, SupportActivity.class));\r\n                    finish();\r\n                } else if (item.getItemId() == R.id.signout_id) {\r\n                    mApiClient.clearDefaultAccountAndReconnect();\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n\r\n\r\n        if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACTIVITY_RECOGNITION)\r\n                != PackageManager.PERMISSION_GRANTED) {\r\n//             Permission is not granted\r\n            ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.ACTIVITY_RECOGNITION}, 123);\r\n        }\r\n    }\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        mApiClient.connect();\r\n\r\n        TodayFragment todayFragment = new TodayFragment();\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(\"username\", getIntent().getStringExtra(\"username\"));\r\n        todayFragment.setArguments(bundle);\r\n        sectionsPagerAdapter = new SelectionPagerAdabter(getSupportFragmentManager());\r\n        sectionsPagerAdapter.addFragment(new AllTimeFragment(), \"All time\");\r\n        sectionsPagerAdapter.addFragment(new WeekFragment(), \"Week\");\r\n        sectionsPagerAdapter.addFragment(new MonthFragment(), \"Month\");\r\n        sectionsPagerAdapter.addFragment(new YearFragment(), \"Year\");\r\n        sectionsPagerAdapter.addFragment(todayFragment, \"Today\");\r\n        viewPager = findViewById(R.id.view_pager);\r\n        viewPager.setAdapter(sectionsPagerAdapter);\r\n        tabs = findViewById(R.id.tabs);\r\n        tabs.setupWithViewPager(viewPager);\r\n        //  tabs.setTabTextColors(ColorStateList.valueOf(R.color.colorAccent));\r\n        tabs.setTabTextColors(getResources().getColor(R.color.white), getResources().getColor(R.color.black));\r\n        tabs.setSelectedTabIndicatorColor(Color.parseColor(\"#FF0000\"));\r\n\r\n\r\n//        GoogleSignInAccount googleSignInAccount = GoogleSignIn.getLastSignedInAccount(this);\r\n//       googleSignInAccount.getEmail();\r\n        //      String s=googleSignInAccount.getEmail();//googleSignInAccount.getIdToken();\r\n        //    Toast.makeText(MainActivity.this, \"token=\"+s, Toast.LENGTH_SHORT).show();\r\n\r\n    }\r\n\r\n\r\n/*    private void accessGoogleFit() {\r\n        Toast.makeText(MainActivity.this, \"accessGoogleFit()\", Toast.LENGTH_SHORT).show();\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(new Date());\r\n        long endTime = cal.getTimeInMillis();\r\n        cal.add(Calendar.YEAR, -1);\r\n        long startTime = cal.getTimeInMillis();\r\n        DataReadRequest readRequest = new DataReadRequest.Builder()\r\n                .aggregate(DataType.TYPE_STEP_COUNT_DELTA, DataType.AGGREGATE_STEP_COUNT_DELTA)\r\n                .setTimeRange(startTime, endTime, TimeUnit.MILLISECONDS)\r\n                .bucketByTime(1, TimeUnit.DAYS)\r\n                .build();\r\n\r\n//        GoogleSignInAccount account = GoogleSignIn\r\n//                .getAccountForExtension(this, fitnessOptions);\r\n//\r\n//\r\n////        DataReadResult dataReadResult = Fitness.HistoryApi.readData(mApiClient, readRequest).await(1, TimeUnit.MINUTES);\r\n////dataReadResult.\r\n//        Fitness.getHistoryClient(this, account)\r\n//                .readData(readRequest)\r\n//                .addOnSuccessListener(response -> {\r\n//                    // Use response data here\r\n//                    String a = response.getDataSet(DataType.TYPE_STEP_COUNT_DELTA).toString();\r\n//                    //      Toast.makeText(MainActivity.this, \"step=\r\n\r\n\"+a, Toast.LENGTH_SHORT).show();\r\n//\r\n//                    Log.d(\"TAG\", \"OnSuccess()\");\r\n//                })\r\n//                .addOnFailureListener(e -> {\r\n//                    Log.d(\"TAG\", \"OnFailure()\", e);\r\n//                });\r\n    }*/\r\n\r\n    @Override\r\n    public boolean onSupportNavigateUp() {\r\n        onBackPressed();\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.setting_menu, menu);\r\n        return super.onCreateOptionsMenu(menu);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            case R.id.bluetooth_menu:\r\n                startActivity(new Intent(MainActivity.this, BluetoothSettingActivity.class));\r\n                return true;\r\n            case R.id.invoke_bluthooth:\r\n                invokeConnectToBluetoothDevice();\r\n            case R.id.ble_minttihealth:\r\n                clickConnect();\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void invokeConnectToBluetoothDevice() {\r\n        if (BuildConfig.BUILD_TYPE == \"light\") {\r\n            AlertDialog infoDialog = new AlertDialog.Builder(this)\r\n                    .setMessage(Html.fromHtml(getResources().getString(R.string.label_upgrade_to_openScale_pro) + \"<br><br> <a href=\\\"https://play.google.com/store/apps/details?id=com.health.openscale.pro\\\">Install openScale pro version</a>\"))\r\n                    .setPositiveButton(getResources().getString(R.string.label_ok), null)\r\n                    .setIcon(R.drawable.ic_launcher_openscale_light)\r\n                    .setTitle(\"openScale \" + BuildConfig.VERSION_NAME)\r\n                    .create();\r\n\r\n            infoDialog.show();\r\n\r\n            ((TextView) infoDialog.findViewById(android.R.id.message)).setMovementMethod(LinkMovementMethod.getInstance());\r\n\r\n            return;\r\n        }\r\n\r\n        final OpenScale openScale = new OpenScale(MainActivity.this);\r\n        String deviceName = prefs.getString(\r\n                BluetoothSettingsFragment.PREFERENCE_KEY_BLUETOOTH_DEVICE_NAME, \"\");\r\n        String hwAddress = prefs.getString(\r\n                BluetoothSettingsFragment.PREFERENCE_KEY_BLUETOOTH_HW_ADDRESS, \"\");\r\n        BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);\r\n        if (!bluetoothManager.getAdapter().isEnabled()) {\r\n            setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_lost);\r\n            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\r\n            startActivityForResult(enableBtIntent, ENABLE_BLUETOOTH_REQUEST);\r\n            return;\r\n        }\r\n        Toast.makeText(getApplicationContext(), getResources().getString(R.string.info_bluetooth_try_connection) + \" \" + deviceName, Toast.LENGTH_SHORT).show();\r\n        setBluetoothStatusIcon(R.drawable.ic_bluetooth_searching);\r\n\r\n        if (!openScale.connectToBluetoothDevice(deviceName, hwAddress, callbackBtHandler)) {\r\n            setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_lost);\r\n            Toast.makeText(getApplicationContext(), deviceName + \" \" + getResources().getString(R.string.label_bt_device_no_support), Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"HandlerLeak\")\r\n    private final Handler callbackBtHandler = new Handler() {\r\n        @Override\r\n        public void handleMessage(Message msg) {\r\n            BluetoothCommunication.BT_STATUS btStatus = BluetoothCommunication.BT_STATUS.values()[msg.what];\r\n            switch (btStatus) {\r\n                case RETRIEVE_SCALE_DATA:\r\n                    setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_success);\r\n                    ScaleMeasurement scaleBtData = (ScaleMeasurement) msg.obj;\r\n                    OpenScale openScale = new OpenScale(MainActivity.this);\r\n                    openScale.addScaleMeasurement(scaleBtData, true);\r\n                    SharedPreferences sharedPreferences\r\n                            = getSharedPreferences(\"measurement\",\r\n                            MODE_PRIVATE);\r\n                    SharedPreferences.Editor myEdit = sharedPreferences.edit();\r\n                    myEdit.putString(\"weight\", String.valueOf(round(scaleBtData.getWeight(), 1)));\r\n                    myEdit.putString(\"muscles\", String.valueOf(round(scaleBtData.getMuscle(), 1)));\r\n                    myEdit.putString(\"Fat\", String.valueOf(round(scaleBtData.getFat(), 1)));\r\n                    myEdit.commit();\r\n\r\n                    databaseHelper.addmeaurement(getIntent().getStringExtra(\"username\").trim(),\r\n                            String.valueOf(round(scaleBtData.getWeight(), 1)),\r\n                            String.valueOf(round(scaleBtData.getMuscle(), 1)),\r\n                            String.valueOf(round(scaleBtData.getFat(), 1)));\r\n                    datamodel.setFat(String.valueOf(round(scaleBtData.getFat(), 1)));\r\n                    datamodel.setMuscle(String.valueOf(round(scaleBtData.getMuscle(), 1)));\r\n                    datamodel.setWeight(String.valueOf(round(scaleBtData.getWeight(), 1)));\r\n                    scaleDataModel = new ScaleDataModel();\r\n                    scaleDataModel.setFat(String.valueOf(round(scaleBtData.getFat(), 1)));\r\n                    scaleDataModel.setMuscle(String.valueOf(round(scaleBtData.getMuscle(), 1)));\r\n                    scaleDataModel.setWeight(String.valueOf(round(scaleBtData.getWeight(), 1)));\r\n                    mReference = FirebaseDatabase.getInstance().getReference(FirebaseAuth.getInstance().getCurrentUser().getUid());\r\n                    mReference.child(\"ScaleData\").setValue(scaleDataModel);\r\n\r\n                    break;\r\n                case INIT_PROCESS:\r\n                    setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_success);\r\n                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.info_bluetooth_init), Toast.LENGTH_SHORT).show();\r\n                    Timber.d(\"Bluetooth initializing\");\r\n                    break;\r\n                case CONNECTION_LOST:\r\n                    setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_lost);\r\n                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.info_bluetooth_connection_lost), Toast.LENGTH_SHORT).show();\r\n                    Timber.d(\"Bluetooth connection lost\");\r\n                    break;\r\n                case NO_DEVICE_FOUND:\r\n                    setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_lost);\r\n                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.info_bluetooth_no_device), Toast.LENGTH_SHORT).show();\r\n                    Timber.e(\"No Bluetooth device found\");\r\n                    break;\r\n                case CONNECTION_RETRYING:\r\n                    setBluetoothStatusIcon(R.drawable.ic_bluetooth_searching);\r\n                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.info_bluetooth_no_device_retrying), Toast.LENGTH_SHORT).show();\r\n                    Timber.e(\"No Bluetooth device found retrying\");\r\n                    break;\r\n                case CONNECTION_ESTABLISHED:\r\n                    setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_success);\r\n                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.info_bluetooth_connection_successful), Toast.LENGTH_SHORT).show();\r\n                    Timber.d(\"Bluetooth connection successful established\");\r\n                    break;\r\n                case CONNECTION_DISCONNECT:\r\n                    setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_lost);\r\n                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.info_bluetooth_connection_disconnected), Toast.LENGTH_SHORT).show();\r\n                    Timber.d(\"Bluetooth connection successful disconnected\");\r\n                    break;\r\n                case UNEXPECTED_ERROR:\r\n                    setBluetoothStatusIcon(R.drawable.ic_bluetooth_connection_lost);\r\n                    Toast.makeText(getApplicationContext(), getResources().getString(R.string.info_bluetooth_connection_error) + \": \" + msg.obj, Toast.LENGTH_SHORT).show();\r\n                    Timber.e(\"Bluetooth unexpected error: %s\", msg.obj);\r\n                    break;\r\n                case SCALE_MESSAGE:\r\n                    try {\r\n                        String toastMessage = String.format(getResources().getString(msg.arg1), msg.obj);\r\n                        Toast.makeText(getApplicationContext(), toastMessage, Toast.LENGTH_LONG).show();\r\n                        Timber.d(\"Bluetooth scale message: \" + toastMessage);\r\n                    } catch (Exception ex) {\r\n                        Timber.e(\"Bluetooth scale message error: \" + ex);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    private void setBluetoothStatusIcon(int iconResource) {\r\n        // bluetoothStatusIcon = iconResource;\r\n        // bluetoothStatus.setIcon(getResources().getDrawable(bluetoothStatusIcon));\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    }\r\n\r\n\r\n    public static double round(double value, int numberOfDigitsAfterDecimalPoint) {\r\n        BigDecimal bigDecimal = new BigDecimal(value);\r\n        bigDecimal = bigDecimal.setScale(numberOfDigitsAfterDecimalPoint,\r\n                BigDecimal.ROUND_HALF_UP);\r\n        return bigDecimal.doubleValue();\r\n    }\r\n\r\n\r\n    //for ble mintti health\r\n    public void clickConnect() {\r\n        if (!App.isUseCustomBleDevService) {\r\n            if (!PermissionManager.isObtain(this, Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q\r\n                            ? PermissionManager.PERMISSION_LOCATION_Q : PermissionManager.PERMISSION_LOCATION\r\n                    , PermissionManager.requestCode_location)) {\r\n                return;\r\n            } else {\r\n                if (!PermissionManager.canScanBluetoothDevice(this)) {\r\n                    new AlertDialogBuilder(this)\r\n                            .setTitle(\"提示\")\r\n                            .setMessage(\"Android 6.0及以上系统需要打开位置开关才能扫描蓝牙设备。\")\r\n                            .setNegativeButton(android.R.string.cancel, null)\r\n                            .setPositiveButton(\"打开位置开关\"\r\n                                    , (dialog, which) -> PermissionManager.openGPS(this)).create().show();\r\n                    return;\r\n                }\r\n            }\r\n            if (mHcService == null) {\r\n            } else {\r\n\r\n                if (mHcService.isConnected) {\r\n                    mHcService.disConnect();\r\n                } else {\r\n                    final int bluetoothEnable = mHcService.isBluetoothEnable();\r\n                    if (bluetoothEnable == -1) {\r\n                        onBLENoSupported();\r\n                    } else if (bluetoothEnable == 0) {\r\n                        onOpenBLE();\r\n                    } else {\r\n                        mHcService.quicklyConnect();\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            final int bleState = MonitorDataTransmissionManager.getInstance().getBleState();\r\n            Log.e(\"clickConnect\", \"bleState:\" + bleState);\r\n            switch (bleState) {\r\n                case BluetoothState.BLE_CLOSED:\r\n                    MonitorDataTransmissionManager.getInstance().bleCheckOpen();\r\n                    break;\r\n                case BluetoothState.BLE_OPENED_AND_DISCONNECT:\r\n                    if (MonitorDataTransmissionManager.getInstance().isScanning()) {\r\n                        new AlertDialogBuilder(getApplicationContext())\r\n                                .setTitle(\"Prompt\")\r\n                                .setMessage(\"\\n\" + \"Scanning device, please wait...\")\r\n                                .setNegativeButton(android.R.string.cancel, null)\r\n                                .setPositiveButton(\"Stop scanning\"\r\n                                        , (dialogInterface, i) ->\r\n                                                MonitorDataTransmissionManager.getInstance().scan(false)).create().show();\r\n                    } else {\r\n                        if (PermissionManager.isObtain(this, Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q\r\n                                        ? PermissionManager.PERMISSION_LOCATION_Q : PermissionManager.PERMISSION_LOCATION\r\n                                , PermissionManager.requestCode_location)) {\r\n                            if (PermissionManager.canScanBluetoothDevice(getApplicationContext())) {\r\n                                if (showScanList) {\r\n                                    Toast.makeText(MainActivity.this, \"showscanlist\", Toast.LENGTH_SHORT).show();\r\n                                    connectByDeviceList();\r\n                                } else {\r\n                                    MonitorDataTransmissionManager.getInstance().scan(true);\r\n                                }\r\n                            } else {\r\n                                new AlertDialogBuilder(this)\r\n                                        .setTitle(\"prompt\")\r\n                                        .setMessage(\"Android 6.0\\n\" +\r\n                                                \"And above systems need to turn on the position switch to scan for Bluetooth devices.\")\r\n                                        .setNegativeButton(android.R.string.cancel, null)\r\n                                        .setPositiveButton(R.string.turn_on_location, (dialog, which) -> PermissionManager.openGPS(MainActivity.this)).create().show();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case BluetoothState.BLE_CONNECTING_DEVICE:\r\n//                    Toast.makeText(mActivity, \"蓝牙连接中...\", Toast.LENGTH_SHORT).show();\r\n                    MonitorDataTransmissionManager.getInstance().disConnectBle();\r\n                    break;\r\n                case BluetoothState.BLE_CONNECTED_DEVICE:\r\n                    Toast.makeText(MainActivity.this, \"connected\", Toast.LENGTH_SHORT).show();\r\n                case BluetoothState.BLE_NOTIFICATION_DISABLED:\r\n                case BluetoothState.BLE_NOTIFICATION_ENABLED:\r\n                    MonitorDataTransmissionManager.getInstance().disConnectBle();\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private void connectByDeviceList() {\r\n        mBleDeviceListDialogFragment = new BleDeviceListDialogFragment();\r\n        mBleDeviceListDialogFragment.show(getSupportFragmentManager(), \"\");\r\n    }\r\n\r\n    @Override\r\n    public void onBLENoSupported() {\r\n        Toast.makeText(MainActivity.this, \"ble not support\", Toast.LENGTH_SHORT).show();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onOpenBLE() {\r\n        startActivityForResult(new Intent(\"android.bluetooth.adapter.action.REQUEST_ENABLE\"), REQUEST_OPEN_BT);\r\n    }\r\n\r\n    private OxTask mOxTask;\r\n\r\n    @Override\r\n    public void onBleState(int bleState) {\r\n        switch (bleState) {\r\n            case BluetoothState.BLE_CLOSED:\r\n                //  btnText.set(getString(R.string.turn_on_bluetooth));\r\n                //reset();\r\n                //isDevBind.set(0);\r\n                break;\r\n            case BluetoothState.BLE_OPENED_AND_DISCONNECT:\r\n                try {\r\n                    //Toast.makeText(MainActivity.this, \"\", Toast.LENGTH_SHORT).show();\r\n                    //  btnText.set(getString(R.string.connect));\r\n                    //reset();\r\n                    // isDevBind.set(0);\r\n                } catch (Exception ignored) {\r\n                }\r\n                break;\r\n\r\n            case BluetoothState.BLE_CONNECTING_DEVICE:\r\n                Toast.makeText(MainActivity.this, \"Ble connecting...\", Toast.LENGTH_SHORT).show();\r\n                //   try {\r\n                // btnText.set(getString(R.string.connecting));\r\n                // } catch (Exception ignored) {\r\n                //}\r\n                break;\r\n            case BluetoothState.BLE_CONNECTED_DEVICE:\r\n                MonitorDataTransmissionManager.getInstance().setScanDevNamePrefixWhiteList(R.array.health_monitor_dev_name_prefixes);\r\n                Toast.makeText(MainActivity.this, \"Ble connected\", Toast.LENGTH_SHORT).show();\r\n                //MonitorDataTransmissionManager.getInstance().startMeasure(MeasureType.SPO2);\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onUpdateDialogBleList() {\r\n        this.runOnUiThread(() -> {\r\n            if (mBleDeviceListDialogFragment != null && mBleDeviceListDialogFragment.isShowing()) {\r\n                mBleDeviceListDialogFragment.refresh();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onServiceConnected(ComponentName componentName, IBinder iBinder) {\r\n        mHcService = ((HcService.LocalBinder) iBinder).getService();\r\n        mHcService.setHandler(mHandler);\r\n        mHcService.initBluetooth();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onServiceDisconnected(ComponentName componentName) {\r\n\r\n        mHcService = null;\r\n    }\r\n\r\n    @Override\r\n    public void onBindingDied(ComponentName name) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onNullBinding(ComponentName name) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onServiceBind() {\r\n        MonitorDataTransmissionManager.getInstance().setScanDevNamePrefixWhiteList(R.array.health_monitor_dev_name_prefixes);\r\n//        MonitorDataTransmissionManager.getInstance().setStrongEcgGain(true);//設置增強心電圖增益\r\n        //服务绑定成功后加载各个测量界面\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onServiceUnbind() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        boolean permissionGranted = PermissionManager.isPermissionGranted(grantResults);\r\n        switch (requestCode) {\r\n            case PermissionManager.requestCode_location:\r\n                if (permissionGranted) {\r\n                    try {\r\n                        Thread.sleep(1000L);\r\n                        clickConnect();\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                } else {\r\n                    Toast.makeText(MainActivity.this, \"没有定位权限\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                break;\r\n        }\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        switch (requestCode) {\r\n            case REQUEST_OPEN_BT:\r\n                //蓝牙启动结果\r\n                //蓝牙启动结果\r\n                Toast.makeText(MainActivity.this, resultCode == Activity.RESULT_OK ? \"蓝牙已打开\" : \"蓝牙打开失败\", Toast.LENGTH_SHORT).show();\r\n                break;\r\n        }\r\n        if (requestCode == 9) {\r\n            // The Task returned from this call is always completed, no need to attach\r\n            // a listener.\r\n            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);\r\n            //handleSignInResult(task);\r\n        }\r\n        if (requestCode == REQUEST_OAUTH) {\r\n            authInProgress = false;\r\n            if (resultCode == RESULT_OK) {\r\n                if (!mApiClient.isConnecting() && !mApiClient.isConnected()) {\r\n                    mApiClient.connect();\r\n                }\r\n            } else if (resultCode == RESULT_CANCELED) {\r\n                Log.e(\"GoogleFit\", \"RESULT_CANCELED\");\r\n                Toast.makeText(this, \"REsult canceled\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } else {\r\n            Log.e(\"GoogleFit\", \"requestCode NOT request_oauth\");\r\n            Toast.makeText(this, \"request code not request_oatth\", Toast.LENGTH_SHORT).show();\r\n        }\r\n        if (requestCode == GOOGLE_FIT_PERMISSIONS_REQUEST_CODE) {\r\n            //accessGoogleFit();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 设备版本号\r\n     *\r\n     * @param wareType 版本类型\r\n     *                 {@link WareType#VER_FIRMWARE 固件版本}\r\n     *                 {@link WareType#VER_HARDWARE 硬件版本}\r\n     *                 {@link WareType#VER_SOFTWARE 软件版本}\r\n     */\r\n    @Override\r\n    public void onDeviceVersion(@WareType int wareType, String version) {\r\n        switch (wareType) {\r\n            case WareType.VER_SOFTWARE:\r\n                softVer.set(version);\r\n                if (mHcService != null) {\r\n                    mHcService.dataQuery(HcService.DATA_QUERY_HARDWARE_VER);\r\n                }\r\n                break;\r\n            case WareType.VER_HARDWARE:\r\n                hardVer.set(version);\r\n                if (mHcService != null) {\r\n                    mHcService.dataQuery(HcService.DATA_QUERY_FIRMWARE_VER);\r\n                }\r\n                break;\r\n            case WareType.VER_FIRMWARE:\r\n                firmVer.set(version);\r\n                if (mHcService != null) {\r\n                    mHcService.dataQuery(HcService.DATA_QUERY_CONFIRM_ECG_MODULE_EXIST);\r\n                }\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDeviceInfo(DeviceInfo device) {\r\n        Log.e(\"onDeviceInfo\", device.toString());\r\n        String deviceId = device.getDeviceId();\r\n        String deviceKey = device.getDeviceKey();\r\n//        如果需要id 和 key 中的字母参数小写，可以如下转换\r\n        deviceId = deviceId.toLowerCase();\r\n        deviceKey = deviceKey.toLowerCase();\r\n        id.set(deviceId);\r\n        key.set(deviceKey);\r\n        if (mHcService != null) {\r\n            mHcService.dataQuery(HcService.DATA_QUERY_BATTERY_INFO);\r\n        }\r\n        if (isLogin.get()) {\r\n            //从服务器确认是否绑定\r\n            getDevList(false);\r\n            startUpCssDev();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onReadDeviceInfoFailed() {\r\n        id.set(\"Unable to read the device ID.\");\r\n        key.set(\"Unable to read the device key.\");\r\n        if (mHcService != null) {\r\n            mHcService.dataQuery(HcService.DATA_QUERY_BATTERY_INFO);\r\n        }\r\n    }\r\n\r\n    private void startUpCssDev() {\r\n        HmLoadDataTool.getInstance().createCssSocket(this.getApplication(), id.get(), key.get(),\r\n                new OnCssSocketRunningListener() {\r\n\r\n                    @Override\r\n                    public void onDataUploadSuccess(LoadBean bean) {\r\n                        //                          ↑↑↑↑↑↑↑↑↑↑↑↑↑\r\n                        //  返回的上传对象，可以在执行此保存到数据库的操作\r\n                        Log.e(\"startUpCssDev\", \"数据上传成功\");\r\n                        //toast(\"数据上传成功\");\r\n                        if (bean != null) {\r\n                            Log.e(\"startUpCssDev\", \"onDataUploadSuccess:\" + bean.toString());\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onDataUploadFail() {\r\n                        Log.e(\"startUpCssDev\", \"数据上传失败...\");\r\n                        //toast(\"数据上传失败\");\r\n                    }\r\n\r\n                    @Override\r\n                    public void onActivating() {\r\n                        Log.e(\"startUpCssDev\", \"CSS Socket模块激活中...\");\r\n                        HmLoadDataTool.getInstance().checkSocketActive();\r\n                    }\r\n\r\n                    /**\r\n                     * 这里的激活成功指的是CSS Socket激活成功，此时Css Socket还要向服务器反馈激活成功的信息\r\n                     * 所以设备是否激活成功，应该以服务器的设备列表是否有该设备为准，不要将此回调函数作为设备激活成功的依据\r\n                     * * {@link //MonitorInfoFragment#loopCheckDevIsBind()}\r\n                     **/\r\n                    @Override\r\n                    public void onActiveSuccess() {\r\n                        Log.e(\"startUpCssDev\", \"CSS Socket模块激活成功\");\r\n                        App.isShowUploadButton.set(true);\r\n//                        if (isDevBind.get() == 0) {\r\n//                            getDevList(false);\r\n//                            clickGetFamilyMember(null);\r\n//                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onActiveFail(String reason) {\r\n                        Log.e(\"startUpCssDev\", \"CSS Socket模块激活失败，reason:\" + reason);\r\n                        App.isShowUploadButton.set(false);\r\n                        // CSS Socket模块激活失败，SDK内部已销毁CSS模块，此时可选择尝试重启模块，多次尝试不成功要及时断开蓝牙连接\r\n                        // 也可选择立即断开蓝牙\r\n                        // CSS Socket 模块与设备蓝牙连接模块相辅相成， 应该遵循如下原则：\r\n                        // 蓝牙连接成功，启动该模块，只有该模块被初始化成功并激活成功，才能继续保持蓝牙的连接，当模块未初始化成功或未激活成功，\r\n                        // SDK内部已直接销毁模块，所以此时也应该及时断开蓝牙连接。\r\n                        // 同理，当蓝牙连接断开后，也应该及时销毁CSS Socket模块。\r\n                        MonitorDataTransmissionManager.getInstance().disConnectBle();\r\n                        HmLoadDataTool.getInstance().destroyCssSocket();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFreeze() {\r\n                        Log.e(\"startUpCssDev\", \"CSS Socket模块已被冻结\");\r\n                    }\r\n\r\n                    @Override\r\n                    public void onInitializeSuccess() {\r\n                        Log.e(\"startUpCssDev\", \"CSS Socket模块初始化成功\");\r\n                        if (isDevBind.get() > 0) {\r\n                            HmLoadDataTool.getInstance().checkSocketActive();\r\n                        } else {\r\n                            Log.e(\"startUpCssDev\", \"onInitializeSuccess\" + \"需要绑定\");\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onInitializeFail(String reason) {\r\n                        Log.e(\"startUpCssDev\", \"CSS Socket模块接初始化失败，reason:\" + reason);\r\n                        MonitorDataTransmissionManager.getInstance().disConnectBle();\r\n                        HmLoadDataTool.getInstance().destroyCssSocket();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onSocketDisconnect() {\r\n                        //模块内部有断开重连机制，所以这里不需要销毁模块，也不需要断开蓝牙连接\r\n                        // 当然可以自己增加判断，断开连接时，连续几次重连失败，再断开蓝牙连接和销毁CSS Socket模块\r\n                        Log.e(\"startUpCssDev\", \"CSS Socket模块与服务器断开连接\");\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void getDevList(final boolean isToast) {\r\n        CssServerApi.getDevList()\r\n                .subscribe(new CssSubscriber<List<Device>>() {\r\n                    @Override\r\n                    public void onNextRequestSuccess(List<Device> devices) {\r\n                        mAdapter.clearItems();\r\n                        mAdapter.addItems(devices);\r\n                        checkDevIsBind(devices, isToast);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onNextRequestFailed(int status) {\r\n                        switch (status) {\r\n                            case -1:\r\n                                Toast.makeText(mHcService, \"网络断开了，检查网络\", Toast.LENGTH_SHORT).show();\r\n                                break;\r\n                            default:\r\n                                Toast.makeText(mHcService, \"请求失败\", Toast.LENGTH_SHORT).show();\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCompleted() {\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Throwable e) {\r\n                        Log.e(\"getDevList - onError\", e.getMessage());\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void checkDevIsBind(List<Device> list, final boolean isToast) {\r\n        // 登录时，页面刚创建 id 为空，确定 所获取的绑定设备列表是否有设备\r\n        if (TextUtils.isEmpty(id.get())) {\r\n            //若有设备，拣选列表第一个设备作为当前选定设备。\r\n            if (list.size() > 0) {\r\n                final Device currDev = list.get(0);\r\n                id.set(currDev.getDevId());\r\n                isDevBind.set(currDev.isPrimaryBind() ? 1 : 2);\r\n            }\r\n        } else\r\n            Observable.from(list)\r\n                    .filter(device -> {\r\n                        Log.e(\"checkDevIsBind - call\", \"mDevId:\" + id.get() + \", deviceId:\" + device.getDevId());\r\n                        return device.getDevId().equals(id.get());\r\n                    })\r\n                    .subscribe(new Subscriber<Device>() {\r\n                        @Override\r\n                        public void onCompleted() {\r\n\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Throwable e) {\r\n\r\n                        }\r\n\r\n                        @Override\r\n                        public void onNext(Device device) {\r\n                            id.set(device.getDevId());\r\n                            isDevBind.set(device.isPrimaryBind() ? 1 : 2);\r\n                            if (isToast)\r\n                                Toast.makeText(mHcService, device.isPrimaryBind() ? \"绑定成功\" : \"关注成功\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    });\r\n    }\r\n\r\n    @Override\r\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\r\n        super.onSaveInstanceState(outState);\r\n        outState.putBoolean(AUTH_PENDING, authInProgress);\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        try {\r\n            Fitness.SensorsApi.remove(mApiClient, this)\r\n                    .setResultCallback(new ResultCallback<Status>() {\r\n                        @Override\r\n                        public void onResult(Status status) {\r\n                            if (status.isSuccess()) {\r\n                                mApiClient.disconnect();\r\n                            }\r\n                        }\r\n                    });\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    int a = 0;\r\n\r\n    public void invokeFitnessApi() {\r\n\r\n        OnDataPointListener listener = new OnDataPointListener() {\r\n            @Override\r\n            public void onDataPoint(DataPoint dataPoint) {\r\n                for (Field field : dataPoint.getDataType().getFields()) {\r\n                    Value value = dataPoint.getValue(field);\r\n                    a += value.asInt();\r\n                }\r\n                Toast.makeText(MainActivity.this, \"Step: \" + a, Toast.LENGTH_SHORT).show();\r\n\r\n\r\n               // String step = String.valueOf(a);\r\n               // stepModel.setStep(step);\r\n//                mReference = FirebaseDatabase.getInstance().getReference(FirebaseAuth.getInstance().getCurrentUser().getUid());\r\n//                mReference.child(\"StepData\").child(getTodayDate()).setValue(stepModel);\r\n               // Toast.makeText(MainActivity.this, \"Step \" + step, Toast.LENGTH_SHORT).show();\r\n            }\r\n        };\r\n        SensorRequest request = new SensorRequest.Builder()\r\n                .setDataType(DataType.TYPE_STEP_COUNT_DELTA)\r\n                .setSamplingRate(1, TimeUnit.SECONDS)\r\n                .build();\r\n        PendingResult<Status> reqResult =\r\n                Fitness.SensorsApi.add(mApiClient, request, listener);\r\n        reqResult.setResultCallback(mSubscribeResultCallback);\r\n\r\n    }\r\n\r\n    //TYPE_STEP_COUNT_CUMULATIVE\r\n    @Override\r\n    public void onConnected(@Nullable Bundle bundle) {\r\n        invokeFitnessApi();\r\n        PendingResult<Status> pendingResult = Fitness.RecordingApi.subscribe(\r\n                mApiClient, DataType.TYPE_STEP_COUNT_DELTA);\r\n        //long WEEK_IN_MS = 60 * 60 * 24;\r\n        //Date now = new Date();\r\n      //  long endTime = now.getTime();\r\n    //    long startTime = endTime - (WEEK_IN_MS);\r\n        Calendar cal = Calendar.getInstance();\r\n        Date now = new Date();\r\n        cal.setTime(now);\r\n        long endTime = cal.getTimeInMillis();\r\n        cal.add(Calendar.WEEK_OF_YEAR, -1);\r\n        long startTime = cal.getTimeInMillis();\r\n        DataReadRequest readreq = new DataReadRequest.Builder()\r\n                .read(DataType.TYPE_STEP_COUNT_DELTA)\r\n                .bucketByTime(1, TimeUnit.DAYS)\r\n                .setTimeRange(startTime, endTime, TimeUnit.MILLISECONDS)\r\n                .build();\r\n        PendingResult<DataReadResult> pendingResult1 =\r\n                Fitness.HistoryApi.readData(mApiClient, readreq);\r\n        pendingResult1.setResultCallback(new ResultCallback<DataReadResult>() {\r\n            @Override\r\n            public void onResult(@NonNull DataReadResult dataReadResult) {\r\n                if (dataReadResult.getBuckets().size() > 0) {\r\n                    for (Bucket bucket : dataReadResult.getBuckets()) {\r\n                        List<DataSet> dataSets = bucket.getDataSets();\r\n                        for (DataSet dataSet : dataSets) {\r\n                            //processDataSet(dataSet);\r\n                            showDataSet(dataSet);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n//        ViewTodaysStepCountTask st=new ViewTodaysStepCountTask();\r\n//        st.execute();\r\n    }\r\n//        DataSourcesRequest dataSourceRequest = new DataSourcesRequest.Builder()\r\n//                .setDataTypes(DataType.TYPE_STEP_COUNT_CUMULATIVE)\r\n//                .setDataSourceTypes(DataSource.TYPE_RAW)\r\n//                .build();\r\n//\r\n//        ResultCallback<DataSourcesResult> dataSourcesResultCallback = new ResultCallback<DataSourcesResult>() {\r\n//            @Override\r\n//            public void onResult(DataSourcesResult dataSourcesResult) {\r\n//                for (DataSource dataSource : dataSourcesResult.getDataSources()) {\r\n//                    if (DataType.TYPE_STEP_COUNT_CUMULATIVE.equals(dataSource.getDataType())) {\r\n//                        registerFitnessDataListener(dataSource, DataType.TYPE_STEP_COUNT_CUMULATIVE);\r\n//                    }\r\n//                }\r\n//            }\r\n//        };\r\n//\r\n//        Fitness.SensorsApi.findDataSources(mApiClient, dataSourceRequest).setResultCallback(dataSourcesResultCallback);\r\n\r\n    //  }\r\n/*\r\n    private void registerFitnessDataListener(DataSource dataSource, DataType dataType) {\r\n\r\n        SensorRequest request = new SensorRequest.Builder()\r\n                .setDataSource(dataSource)\r\n                .setDataType(dataType)\r\n                .setSamplingRate(3, TimeUnit.SECONDS)\r\n                .build();\r\n\r\n        Fitness.SensorsApi.add(mApiClient, request, this)\r\n                .setResultCallback(new ResultCallback<Status>() {\r\n                    @Override\r\n                    public void onResult(Status status) {\r\n                        if (status.isSuccess()) {\r\n                            Toast.makeText(MainActivity.this, \"SensorApi successfully added\", Toast.LENGTH_SHORT).show();\r\n                            Log.e(\"GoogleFit\", \"SensorApi successfully added\");\r\n                        }\r\n                    }\r\n                });\r\n    }*/\r\n\r\n    @Override\r\n    public void onConnectionSuspended(int i) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\n        if (!authInProgress) {\r\n            try {\r\n                authInProgress = true;\r\n                connectionResult.startResolutionForResult(MainActivity.this, REQUEST_OAUTH);\r\n            } catch (IntentSender.SendIntentException e) {\r\n\r\n            }\r\n        } else {\r\n            Log.e(\"GoogleFit\", \"authInProgress\");\r\n        }\r\n        if (connectionResult.getErrorCode() == FitnessStatusCodes.NEEDS_OAUTH_PERMISSIONS) {\r\n            try {\r\n                connectionResult.startResolutionForResult(this, REQUEST_OAUTH);\r\n            } catch (IntentSender.SendIntentException e) {\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDataPoint(DataPoint dataPoint) {\r\n        for (final Field field : dataPoint.getDataType().getFields()) {\r\n            final Value value = dataPoint.getValue(field);\r\n            runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n\r\n                    Toast.makeText(getApplicationContext(), \"Field: \" + field.getName() + \" Value: \" + value, Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public String getTodayDate() {\r\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.ENGLISH);\r\n        Date date = new Date();\r\n        return dateFormat.format(date);\r\n    }\r\n//    public void displayStepDataForToday() {\r\n//        DailyTotalResult result = Fitness.HistoryApi.readDailyTotal( mApiClient, DataType.TYPE_STEP_COUNT_DELTA ).await(1, TimeUnit.MINUTES);\r\n//        showDataSet(result.getTotal());\r\n//    }\r\n    private void showDataSet(DataSet dataSet) {\r\n        Log.e(\"History\", \"Data returned for Data type: \" + dataSet.getDataType().getName());\r\n        DateFormat dateFormat = DateFormat.getDateInstance();\r\n        DateFormat timeFormat = DateFormat.getTimeInstance();\r\n\r\n        for (DataPoint dp : dataSet.getDataPoints()) {\r\n            Log.e(\"History\", \"Data point:\");\r\n            Log.e(\"History\", \"\\tType: \" + dp.getDataType().getName());\r\n            Log.e(\"History\", \"\\tStart: \" + dateFormat.format(dp.getStartTime(TimeUnit.MILLISECONDS)) + \" \" + timeFormat.format(dp.getStartTime(TimeUnit.MILLISECONDS)));\r\n            Log.e(\"History\", \"\\tEnd: \" + dateFormat.format(dp.getEndTime(TimeUnit.MILLISECONDS)) + \" \" + timeFormat.format(dp.getStartTime(TimeUnit.MILLISECONDS)));\r\n            for(Field field : dp.getDataType().getFields()) {\r\n                Log.e(\"History\", \"\\tField: \" + field.getName() +\r\n                        \" Value: \" + dp.getValue(field));\r\n                //writeToFile(dp.getValue(field).asInt());\r\n                //this is how I save the data (wit the writeToFile)\r\n            }\r\n        }\r\n\r\n    }\r\n    protected void onDestroy() {\r\n        if (!App.isUseCustomBleDevService) {\r\n            unbindService(this);\r\n        } else {\r\n            //解绑服务\r\n            MonitorDataTransmissionManager.getInstance().unBind();\r\n        }\r\n        App.isShowUploadButton.set(false);\r\n        super.onDestroy();\r\n    }\r\n//    public class ViewTodaysStepCountTask extends AsyncTask<Void, Void, Void> {\r\n//        protected Void doInBackground(Void... params) {\r\n//            displayStepDataForToday();\r\n//            return null;\r\n//        }\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/wombatapp/MainActivity.java	(revision c7d187dc01226e114fb907081729d28b9ac08fb6)
+++ app/src/main/java/com/example/wombatapp/MainActivity.java	(date 1604737897172)
@@ -463,6 +463,7 @@
                             String.valueOf(round(scaleBtData.getWeight(), 1)),
                             String.valueOf(round(scaleBtData.getMuscle(), 1)),
                             String.valueOf(round(scaleBtData.getFat(), 1)));
+
                     datamodel.setFat(String.valueOf(round(scaleBtData.getFat(), 1)));
                     datamodel.setMuscle(String.valueOf(round(scaleBtData.getMuscle(), 1)));
                     datamodel.setWeight(String.valueOf(round(scaleBtData.getWeight(), 1)));
